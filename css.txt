h1 { 
  color: blue; 
  font-size: 12px; 
} It makes all the h1 elements color blue and the font size 12px.


Types on Applying css:
1) Inline CSS: We use the style attribute.
   Eg:- <h1 style="color:blue;">A Blue Heading</h1> -- element selector

2) Internal CSS: CSS Present in the style tag of the head section.
   Eg:- 
   <head>
  <style>
    h1 {color: red;}
    p {color: blue;}
  </style>
   </head>

3) External CSS: We link separate .css file for large projects.
   Eg:- In HTML
   <head>
    <link rel="stylesheet" href="styles.css">
   </head>
        In CSS
    h1 {color: red;}
    p {color: blue;}


Class Selector:- 
In CSS - 
.important-text {
  color: red;
  font-style: italic; /* makes the text italic */
}
In HTML -
<p class="important-text">This text is considered important!</p>

Id Selector:-
In CSS -
#special-text {
  color: red;
}
In HTML -
<p id="special-text">This text is unique and hence, red!</p>

1) div: This is a block-level element.  - This occupies the whole row.
Eg:-
<body>
  <div style="background-color:yellow;">
    <h2>This is a heading inside a div element</h2>
    <p>This is a paragraph inside a div element.</p>
  </div>
</body>
Colours the whole row of h2 and p yellow.

2) span: This is an inline element. - This occupies only the rquired area.
Eg:-
<p>My mother has <span style="color:blue;">blue</span> eyes.</p>

Models:-
1) CSS Box Model 
  Eg- <p style="border: 1px solid black; padding: 20px; margin: 30px;">Hello, World!</p>

2) Flexbox - we can control how elements inside a box align and order themselves.
  Eg-
  <!DOCTYPE html>
<html>
<head>
<style>
.flex_demo {
  display: flex; /* apply flexbox */
  justify-content: space-around; /* horizontal alignment */
  align-items: center; /* vertical alignment */
}
.flex_demo > div {
  background-color: lightblue;
  padding: 20px;
}
</style>
</head>
<body>

<div class="flex_demo">
  <div>I love</div> 
  <div>Flexbox</div> 
  <div>Layout!</div> 
</div>

</body>
</html>

The > combinator selects elements that are direct children of a specified element. In this example, .flex_demo > 
div selects all div elements that are direct children of the element with the flex_demo class.

3) Grid - It makes complex designs simple, letting us quickly decide what goes in which row or column.
  Eg-<!DOCTYPE html>
<html>
<head>
<style>
.grid_demo {
  display: grid;
  grid-template-columns: auto auto;
  gap: 10px;
  background-color: lightpink;
  padding: 10px;
}
.grid_demo > div {
  background-color: lightblue;
  padding: 20px;
  text-align: center;
}
</style>
</head>
<body>

<div class="grid_demo"> 
  <div>I</div>
  <div>love</div>
  <div>Grid</div>
  <div>Layout!</div>
</div>

</body>
</html>



