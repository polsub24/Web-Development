// This is a functional component called Greeting
function Greeting() {
  return <h1>Hello, JavaScript!</h1>; 
}

import React from 'react'; // importing React to use React.Component;

// Defining Greeting as a class component
class Greeting extends React.Component {
  render() {
    return <h1>Hello, JavaScript!</h1>; 
  }
}

import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(<Greeting />);

index.JSX
import { createRoot } from 'react-dom/client';
import App from './App';  // Here we're importing the App component from the App.jsx file

const root = createRoot(document.getElementById('root'));
root.render(<App />);

App.jsx
// This is our main or App component
function App() {
  return (
    <div>
      <h1>Welcome to React.js!</h1>
    </div>
  );
}

export default App;  

Prop(Properties)
// This is a functional component called Greeting
function Greeting(props) {  // props is an object containing properties passed down from a parent component
  const greeting = {
    'English': 'Hello',
    'Spanish': 'Hola',
    'French': 'Bonjour'
  };

  return <h1>{greeting[props.language]}, {props.name}!</h1>; 
}

// We are passing the props 'name' as 'JavaScript' and 'language' as 'English'
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(<Greeting name="JavaScript" language="English" />);

ES6 Destructuring:-
// This is a functional component called Greeting with props destructured
function Greeting({name, language}) {  // destructuring props directly in the function's parameters
  const greeting = {
    'English': 'Hello',
    'Spanish': 'Hola',
    'French': 'Bonjour'
  };

  return <h1>{greeting[language]}, {name}!</h1>; 
}

// We are passing the props 'name' as 'JavaScript' and 'language' as 'English'
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(<Greeting name="JavaScript" language="English" />);


UseState hook:-
const [score, setScore] = useState(0);

Using it with Event Listeners:
import { useState } from 'react';

function ColorChanger() {
  const [color, setColor] = useState('red');

  return (
    <div 
      style={{ backgroundColor: color, height: '200px', width: '200px'}}
      onMouseOver={() => setColor('blue')}
      onMouseOut={() => setColor('red')}>
    </div>
  );
}

export default ColorChanger;


Using with complex datatypes:
import { useState } from 'react';

function ProfileUpdater() { 
  // creating a state variable profile with two properties
  const [profile, setProfile] = useState({name: "John", age: 25});

  const handleBirthday = () => {
    // updating age while keeping the name the same
    setProfile(currentProfile => ({...currentProfile, age: currentProfile.age + 1}));
  };

  return (
    <div>
      <h2>Name: {profile.name}</h2>
      <h2>Age: {profile.age}</h2>
      <button onClick={handleBirthday}>Happy Birthday!</button>
    </div>
  );
}

export default ProfileUpdater;

when the 'Happy Birthday!' button is clicked, the handleBirthday function is called, which updates the age property of profile while leaving the name property the same.





