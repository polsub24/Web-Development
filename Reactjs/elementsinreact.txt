1) input: This versatile element allows users to provide data input. 
Its appearance and behavior vary based on the type attribute. For instance, type="text" creates a simple text field.

2) textarea: This element is a text-input area typically used for inputs that require more than one sentence.

3) select: This element generates a dropdown list of pre-defined options, encapsulated by option tags.

4) label: Specifies a label for the associated element. Enhances user experience by binding text to its associated form control, 
so clicking on the label selects the control.

))Example with a text input field and submit input button
import { useState } from "react";

function SimpleForm() {
  const [name, setName] = useState("");
  
  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  return (
    <form>
      <label>
        Name: 
        <input type="text" value={name} onChange={handleNameChange} />
      </label>
      <input type="submit" />
    </form>
  );
}

export default SimpleForm;

))The handleNameChange function captures and updates the input value (name) every time you type into the text field.

))Note that in JSX, void elements like input need closing with />.

))select form element example:-
import { useState } from "react";

function SimpleForm() {
  const [country, setCountry] = useState("");
  
  const handleCountryChange = (event) => {
    setCountry(event.target.value);
  };

  return (
    <form>
      <label>
        Select your country: 
        <select value={country} onChange={handleCountryChange}>
            <option value="">--Please choose an option--</option>
            <option value="United States">United States</option>
            <option value="United Kingdom">United Kingdom</option>
            <option value="Australia">Australia</option>
            { /* ... (more options) ... */ }
        </select>
      </label>
      <input type="submit" value="Submit" />
    </form>
  );
}

export default SimpleForm;

))value attribute example:-
  // ...
  const handleNameChange = (event) => {
    setName(event.target.value);
  };
  // ...

))Handling Form Submissions
When submitting a form, by clicking or pressing enter on a submit type input or a button type input, 
the data from the form fields is typically sent to the server, and the web page is refreshed. We aim to prevent this standard page refresh. 
By overriding this default behavior with preventDefault(), we can keep the page static while submitting the form.
Example:-
  // ...
  const handleSubmit = (event) => {
    event.preventDefault();  // prevents form submission from refreshing the page
    alert(`The input field text is "${value}"`);
  };
  // ...